// Generated by CoffeeScript 1.10.0
(function() {
  var Slider;

  Slider = (function() {
    Slider.prototype.defaults = {
      min: 0,
      max: 10,
      step: 1,
      value: 5,
      selection: 'before',
      tooltip: 'show',
      handle: 'round',
      orientation: 'horizontal',
      formater: function(value) {
        return value;
      }
    };

    Slider.prototype.pickerHTML = "<div class=\"slider\">\n  <div class=\"slider-track\">\n    <div class=\"slider-selection\"></div>\n    <div class=\"slider-handle\"></div>\n    <div class=\"slider-handle\"></div>\n  </div>\n  <div class=\"tooltip\">\n    <div class=\"tooltip-arrow\"></div>\n    <div class=\"tooltip-inner\"></div>\n  </div>\n</div>";

    Slider.prototype.over = false;

    Slider.prototype.inDrag = false;

    function Slider(element, options) {
      this.options = $.extend({}, this.defaults, options);
      this.element = $(element);
      this.picker = $(this.pickerHTML);
      this.picker.insertBefore(this.element);
      this.picker.append(this.element);
      this._setup();
      this.layout();
      if (this.id) {
        this.picker[0].id = this.id;
      }
      return this;
    }

    Slider.prototype.showTooltip = function() {
      this.tooltip.addClass('in');
      this.over = true;
      return this;
    };

    Slider.prototype.hideTooltip = function() {
      if (!this.inDrag) {
        this.tooltip.removeClass('in');
      }
      this.over = false;
      return this;
    };

    Slider.prototype.layout = function() {
      var abs, min, tip;
      this.handle1Stype[this.stylePos] = this.percentage[0] + "%";
      this.handle2Stype[this.stylePos] = this.percentage[1] + "%";
      min = Math.min(this.percentage[0], this.percentage[1]);
      abs = Math.abs(this.percentage[0] - this.percentage[1]);
      if (this.orientation === 'vertical') {
        this.selectionElStyle.top = min + "%";
        this.selectionElStyle.height = abs + "%";
      } else {
        this.selectionElStyle.left = min + "%";
        this.selectionElStyle.width = abs + "%";
      }
      tip = this.range ? (this.formater(this.value[0])) + " : " + (this.formater(this.value[1])) : "" + (this.formater(this.value[0]));
      this.tooltipInner.text(tip);
      this.tooltip[0].style[this.stylePos] = this._tooltipPx(this.range);
      return this;
    };

    Slider.prototype.mousedown = function(ev) {
      var diff1, diff2, percentage, val;
      if (this.touchCapable && ev.type === 'touchstart') {
        ev = ev.originalEvent;
      }
      this.offset = this.picker.offset();
      this.size = this.picker[0][this.sizePos];
      percentage = this.getPercentage(ev);
      if (this.range) {
        diff1 = Math.abs(this.percentage[0] - percentage);
        diff2 = Math.abs(this.percentage[1] - percentage);
        this.dragged = diff1 < diff2 ? 0 : 1;
      } else {
        this.dragged = 0;
      }
      this.percentage[this.dragged] = percentage;
      this.layout();
      $(document).on({
        mousemove: $.proxy(this.mousemove, this),
        mouseup: $.proxy(this.mouseup, this)
      });
      if (this.touchCapable) {
        $(document).on({
          touchmove: $.proxy(this.mousemove, this),
          touchend: $.proxy(this.mouseup, this)
        });
      }
      this.inDrag = true;
      val = this.calculateValue();
      this.element.trigger({
        type: 'slideStart',
        value: val
      });
      this.element.trigger({
        type: 'slide',
        value: val
      });
      return false;
    };

    Slider.prototype.mousemove = function(ev) {
      var percentage, val;
      if (this.touchCapable && ev.type === 'touchmove') {
        ev = ev.originalEvent;
      }
      percentage = this.getPercentage(ev);
      if (this.range) {
        if (this.dragged === 0 && this.percentage[1] < percentage) {
          this.percentage[0] = this.percentage[1];
          this.dragged = 1;
        } else if (this.dragged === 1 && this.percentage[0] > percentage) {
          this.percentage[1] = this.percentage[0];
          this.dragged = 0;
        }
      }
      this.percentage[this.dragged] = percentage;
      this.layout();
      val = this.calculateValue();
      this.element.trigger({
        type: 'slide',
        value: val
      });
      this.element.data('value', val).prop('value', val);
      return false;
    };

    Slider.prototype.mouseup = function(ev) {
      var val;
      $(document).off({
        mousemove: this.mousemove,
        mouseup: this.mouseup
      });
      if (this.touchCapable) {
        $(document).off({
          touchmove: this.mousemove,
          touchend: this.mouseup
        });
      }
      this.inDrag = false;
      if (this.over === false) {
        this.hideTooltip();
      }
      val = this.calculateValue();
      this.element.trigger({
        type: 'slideStop',
        value: val
      });
      this.element.data('value', val).prop('value', val);
      return false;
    };

    Slider.prototype.calculateValue = function() {
      var firstVal, val;
      firstVal = this._calcValue(this.percentage[0]);
      if (this.range) {
        this.value = val = [firstVal, this._calcValue(this.percentage[1])];
      } else {
        val = firstVal;
        this.value = [val, this.value[1]];
      }
      return val;
    };

    Slider.prototype.getPercentage = function(ev) {
      var m, p, p2;
      if (this.touchCapable) {
        ev = ev.touches[0];
      }
      p2 = this.percentage[2];
      p = (ev[this.mousePos] - this.offset[this.stylePos]) * 100 / this.size;
      p = Math.round(p / p2) * p2;
      m = Math.min(100, p);
      return Math.max(0, m);
    };

    Slider.prototype.getValue = function() {
      if (this.range) {
        return this.value;
      } else {
        return this.value[0];
      }
    };

    Slider.prototype.setValue = function(val) {
      this.value = val;
      if (this.range) {
        this.value[0] = Math.max(this.min, Math.min(this.max, this.value[0]));
        this.value[1] = Math.max(this.min, Math.min(this.max, this.value[1]));
      } else {
        this.value = [Math.max(this.min, Math.min(this.max, this.value))];
        this.handle2.addClass('hide');
        this.value[1] = this.selection === 'after' ? this.max : this.min;
      }
      this.diff = this.max - this.min;
      this._setupPercentage();
      this.layout();
      return this;
    };

    Slider.prototype.update = function(options) {
      if (options == null) {
        options = {};
      }
      this.options = $.extend({}, this.options, options);
      this._setup();
      return this;
    };

    Slider.prototype._calcValue = function(value) {
      return this.min + Math.round((this.diff * value / 100) / this.step) * this.step;
    };

    Slider.prototype._tooltipPx = function(isRange) {
      var diff, outer, size;
      if (isRange == null) {
        isRange = false;
      }
      diff = this.percentage[1] - this.percentage[0];
      outer = this.orientation === 'vertical' ? this.tooltip.outerHeight() / 2 : this.tooltip.outerWidth() / 2;
      size = isRange ? this.size * ((this.percentage[0] + diff) / 2) / 100 - outer : this.size * this.percentage[0] / 100 - outer;
      return size + "px";
    };

    Slider.prototype._setup = function() {
      this._setupSettings();
      this._setupTooltip();
      this._setupOrientation();
      this._setupTouch();
      this._setupSelection();
      this._setupHandle();
      this._setupValue();
      this._setupPercentage();
      this._setupEvents();
    };

    Slider.prototype._setupSettings = function() {
      this.id = this.element.data('slider-id') || this.options.id;
      this.doTooltip = this.element.data('slider-tooltip') || this.options.tooltip;
      this.orientation = this.element.data('slider-orientation') || this.options.orientation;
      this.min = this.element.data('slider-min') || this.options.min;
      this.max = this.element.data('slider-max') || this.options.max;
      this.step = this.element.data('slider-step') || this.options.step;
      this.value = this.element.data('slider-value') || this.options.value;
      this.formater = this.options.formater;
      this.range = this.value[1] !== void 0;
      this.diff = this.max - this.min;
      this.offset = this.picker.offset();
    };

    Slider.prototype._setupTooltip = function() {
      this.tooltip = this.picker.find('.tooltip');
      this.tooltipInner = this.tooltip.find('.tooltip-inner');
    };

    Slider.prototype._setupOrientation = function() {
      var top;
      if (this.orientation === 'vertical') {
        this.stylePos = 'top';
        this.mousePos = 'pageY';
        this.sizePos = 'offsetHeight';
        this.picker.addClass('slider-vertical');
        this.tooltip.addClass('right')[0].style.left = '100%';
      } else {
        this.orientation = 'horizontal';
        this.stylePos = 'left';
        this.mousePos = 'pageX';
        this.sizePos = 'offsetWidth';
        this.picker.addClass('slider-horizontal').css('width', this.element.outerWidth());
        top = -this.tooltip.outerHeight() - 14;
        this.tooltip.addClass('top')[0].style.top = top + "px";
      }
      this.size = this.picker[0][this.sizePos];
    };

    Slider.prototype._setupTouch = function() {
      if (typeof Modernizr !== 'undefined' && Modernizr.touch) {
        this.touchCapable = true;
      }
    };

    Slider.prototype._setupSelection = function() {
      this.selection = this.element.data('slider-selection') || this.options.selection;
      this.selectionEl = this.picker.find('.slider-selection');
      this.selectionElStyle = this.selectionEl[0].style;
      if (this.selection === 'none') {
        this.selectionEl.addClass('hide');
      }
    };

    Slider.prototype._setupHandle = function() {
      var handle;
      this.handle1 = this.picker.find('.slider-handle:first');
      this.handle1Stype = this.handle1[0].style;
      this.handle2 = this.picker.find('.slider-handle:last');
      this.handle2Stype = this.handle2[0].style;
      handle = this.element.data('slider-handle') || this.options.handle;
      switch (handle) {
        case 'round':
          this.handle1.addClass('round');
          this.handle2.addClass('round');
          break;
        case 'triangle':
          this.handle1.addClass('triangle');
          this.handle2.addClass('triangle');
      }
    };

    Slider.prototype._setupValue = function() {
      if (this.range) {
        this.value[0] = Math.max(this.min, Math.min(this.max, this.value[0]));
        this.value[1] = Math.max(this.min, Math.min(this.max, this.value[1]));
      } else {
        this.value = [Math.max(this.min, Math.min(this.max, this.value))];
        this.handle2.addClass('hide');
        if (this.selection === 'after') {
          this.value[2] = this.max;
        } else {
          this.value[1] = this.min;
        }
      }
    };

    Slider.prototype._setupPercentage = function() {
      this.percentage = [this._calcPercentage(this.value[0]), this._calcPercentage(this.value[1]), this.step * 100 / this.diff];
    };

    Slider.prototype._setupEvents = function() {
      var event;
      event = this.touchCapable ? 'touchstart' : 'mousedown';
      this.picker.on(event, $.proxy(this.mousedown, this));
      if (this.doTooltip === 'show') {
        this.picker.on({
          mouseenter: $.proxy(this.showTooltip, this),
          mouseleave: $.proxy(this.hideTooltip, this)
        });
      } else {
        this.tooltip.addClass('hide');
      }
    };

    Slider.prototype._calcPercentage = function(value) {
      return (value - this.min) * 100 / this.diff;
    };

    return Slider;

  })();

  window.jQuery.fn.slider = function(option, val) {
    var $this, data;
    $this = $(this);
    data = $this.data('slider');
    if (data) {
      return data[option](val);
    }
    if (option && typeof option === 'object') {
      data = new Slider(this, option);
      $this.data('slider', data);
    }
  };

  window.jQuery.fn.slider.Constructor = Slider;

}).call(this);
